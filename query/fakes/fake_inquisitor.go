// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/mike-carey/cfquery/query"
)

type FakeInquisitor struct {
	GetAppServiceStub        func() *query.AppService
	getAppServiceMutex       sync.RWMutex
	getAppServiceArgsForCall []struct {
	}
	getAppServiceReturns struct {
		result1 *query.AppService
	}
	getAppServiceReturnsOnCall map[int]struct {
		result1 *query.AppService
	}
	GetOrgServiceStub        func() *query.OrgService
	getOrgServiceMutex       sync.RWMutex
	getOrgServiceArgsForCall []struct {
	}
	getOrgServiceReturns struct {
		result1 *query.OrgService
	}
	getOrgServiceReturnsOnCall map[int]struct {
		result1 *query.OrgService
	}
	GetServiceStub        func(string) query.Service
	getServiceMutex       sync.RWMutex
	getServiceArgsForCall []struct {
		arg1 string
	}
	getServiceReturns struct {
		result1 query.Service
	}
	getServiceReturnsOnCall map[int]struct {
		result1 query.Service
	}
	GetServiceBindingServiceStub        func() *query.ServiceBindingService
	getServiceBindingServiceMutex       sync.RWMutex
	getServiceBindingServiceArgsForCall []struct {
	}
	getServiceBindingServiceReturns struct {
		result1 *query.ServiceBindingService
	}
	getServiceBindingServiceReturnsOnCall map[int]struct {
		result1 *query.ServiceBindingService
	}
	GetServiceInstanceServiceStub        func() *query.ServiceInstanceService
	getServiceInstanceServiceMutex       sync.RWMutex
	getServiceInstanceServiceArgsForCall []struct {
	}
	getServiceInstanceServiceReturns struct {
		result1 *query.ServiceInstanceService
	}
	getServiceInstanceServiceReturnsOnCall map[int]struct {
		result1 *query.ServiceInstanceService
	}
	GetSpaceServiceStub        func() *query.SpaceService
	getSpaceServiceMutex       sync.RWMutex
	getSpaceServiceArgsForCall []struct {
	}
	getSpaceServiceReturns struct {
		result1 *query.SpaceService
	}
	getSpaceServiceReturnsOnCall map[int]struct {
		result1 *query.SpaceService
	}
	NewAppServiceStub        func() *query.AppService
	newAppServiceMutex       sync.RWMutex
	newAppServiceArgsForCall []struct {
	}
	newAppServiceReturns struct {
		result1 *query.AppService
	}
	newAppServiceReturnsOnCall map[int]struct {
		result1 *query.AppService
	}
	NewOrgServiceStub        func() *query.OrgService
	newOrgServiceMutex       sync.RWMutex
	newOrgServiceArgsForCall []struct {
	}
	newOrgServiceReturns struct {
		result1 *query.OrgService
	}
	newOrgServiceReturnsOnCall map[int]struct {
		result1 *query.OrgService
	}
	NewServiceBindingServiceStub        func() *query.ServiceBindingService
	newServiceBindingServiceMutex       sync.RWMutex
	newServiceBindingServiceArgsForCall []struct {
	}
	newServiceBindingServiceReturns struct {
		result1 *query.ServiceBindingService
	}
	newServiceBindingServiceReturnsOnCall map[int]struct {
		result1 *query.ServiceBindingService
	}
	NewServiceInstanceServiceStub        func() *query.ServiceInstanceService
	newServiceInstanceServiceMutex       sync.RWMutex
	newServiceInstanceServiceArgsForCall []struct {
	}
	newServiceInstanceServiceReturns struct {
		result1 *query.ServiceInstanceService
	}
	newServiceInstanceServiceReturnsOnCall map[int]struct {
		result1 *query.ServiceInstanceService
	}
	NewSpaceServiceStub        func() *query.SpaceService
	newSpaceServiceMutex       sync.RWMutex
	newSpaceServiceArgsForCall []struct {
	}
	newSpaceServiceReturns struct {
		result1 *query.SpaceService
	}
	newSpaceServiceReturnsOnCall map[int]struct {
		result1 *query.SpaceService
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInquisitor) GetAppService() *query.AppService {
	fake.getAppServiceMutex.Lock()
	ret, specificReturn := fake.getAppServiceReturnsOnCall[len(fake.getAppServiceArgsForCall)]
	fake.getAppServiceArgsForCall = append(fake.getAppServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAppService", []interface{}{})
	fake.getAppServiceMutex.Unlock()
	if fake.GetAppServiceStub != nil {
		return fake.GetAppServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getAppServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) GetAppServiceCallCount() int {
	fake.getAppServiceMutex.RLock()
	defer fake.getAppServiceMutex.RUnlock()
	return len(fake.getAppServiceArgsForCall)
}

func (fake *FakeInquisitor) GetAppServiceCalls(stub func() *query.AppService) {
	fake.getAppServiceMutex.Lock()
	defer fake.getAppServiceMutex.Unlock()
	fake.GetAppServiceStub = stub
}

func (fake *FakeInquisitor) GetAppServiceReturns(result1 *query.AppService) {
	fake.getAppServiceMutex.Lock()
	defer fake.getAppServiceMutex.Unlock()
	fake.GetAppServiceStub = nil
	fake.getAppServiceReturns = struct {
		result1 *query.AppService
	}{result1}
}

func (fake *FakeInquisitor) GetAppServiceReturnsOnCall(i int, result1 *query.AppService) {
	fake.getAppServiceMutex.Lock()
	defer fake.getAppServiceMutex.Unlock()
	fake.GetAppServiceStub = nil
	if fake.getAppServiceReturnsOnCall == nil {
		fake.getAppServiceReturnsOnCall = make(map[int]struct {
			result1 *query.AppService
		})
	}
	fake.getAppServiceReturnsOnCall[i] = struct {
		result1 *query.AppService
	}{result1}
}

func (fake *FakeInquisitor) GetOrgService() *query.OrgService {
	fake.getOrgServiceMutex.Lock()
	ret, specificReturn := fake.getOrgServiceReturnsOnCall[len(fake.getOrgServiceArgsForCall)]
	fake.getOrgServiceArgsForCall = append(fake.getOrgServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("GetOrgService", []interface{}{})
	fake.getOrgServiceMutex.Unlock()
	if fake.GetOrgServiceStub != nil {
		return fake.GetOrgServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getOrgServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) GetOrgServiceCallCount() int {
	fake.getOrgServiceMutex.RLock()
	defer fake.getOrgServiceMutex.RUnlock()
	return len(fake.getOrgServiceArgsForCall)
}

func (fake *FakeInquisitor) GetOrgServiceCalls(stub func() *query.OrgService) {
	fake.getOrgServiceMutex.Lock()
	defer fake.getOrgServiceMutex.Unlock()
	fake.GetOrgServiceStub = stub
}

func (fake *FakeInquisitor) GetOrgServiceReturns(result1 *query.OrgService) {
	fake.getOrgServiceMutex.Lock()
	defer fake.getOrgServiceMutex.Unlock()
	fake.GetOrgServiceStub = nil
	fake.getOrgServiceReturns = struct {
		result1 *query.OrgService
	}{result1}
}

func (fake *FakeInquisitor) GetOrgServiceReturnsOnCall(i int, result1 *query.OrgService) {
	fake.getOrgServiceMutex.Lock()
	defer fake.getOrgServiceMutex.Unlock()
	fake.GetOrgServiceStub = nil
	if fake.getOrgServiceReturnsOnCall == nil {
		fake.getOrgServiceReturnsOnCall = make(map[int]struct {
			result1 *query.OrgService
		})
	}
	fake.getOrgServiceReturnsOnCall[i] = struct {
		result1 *query.OrgService
	}{result1}
}

func (fake *FakeInquisitor) GetService(arg1 string) query.Service {
	fake.getServiceMutex.Lock()
	ret, specificReturn := fake.getServiceReturnsOnCall[len(fake.getServiceArgsForCall)]
	fake.getServiceArgsForCall = append(fake.getServiceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetService", []interface{}{arg1})
	fake.getServiceMutex.Unlock()
	if fake.GetServiceStub != nil {
		return fake.GetServiceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) GetServiceCallCount() int {
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	return len(fake.getServiceArgsForCall)
}

func (fake *FakeInquisitor) GetServiceCalls(stub func(string) query.Service) {
	fake.getServiceMutex.Lock()
	defer fake.getServiceMutex.Unlock()
	fake.GetServiceStub = stub
}

func (fake *FakeInquisitor) GetServiceArgsForCall(i int) string {
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	argsForCall := fake.getServiceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetServiceReturns(result1 query.Service) {
	fake.getServiceMutex.Lock()
	defer fake.getServiceMutex.Unlock()
	fake.GetServiceStub = nil
	fake.getServiceReturns = struct {
		result1 query.Service
	}{result1}
}

func (fake *FakeInquisitor) GetServiceReturnsOnCall(i int, result1 query.Service) {
	fake.getServiceMutex.Lock()
	defer fake.getServiceMutex.Unlock()
	fake.GetServiceStub = nil
	if fake.getServiceReturnsOnCall == nil {
		fake.getServiceReturnsOnCall = make(map[int]struct {
			result1 query.Service
		})
	}
	fake.getServiceReturnsOnCall[i] = struct {
		result1 query.Service
	}{result1}
}

func (fake *FakeInquisitor) GetServiceBindingService() *query.ServiceBindingService {
	fake.getServiceBindingServiceMutex.Lock()
	ret, specificReturn := fake.getServiceBindingServiceReturnsOnCall[len(fake.getServiceBindingServiceArgsForCall)]
	fake.getServiceBindingServiceArgsForCall = append(fake.getServiceBindingServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("GetServiceBindingService", []interface{}{})
	fake.getServiceBindingServiceMutex.Unlock()
	if fake.GetServiceBindingServiceStub != nil {
		return fake.GetServiceBindingServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getServiceBindingServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) GetServiceBindingServiceCallCount() int {
	fake.getServiceBindingServiceMutex.RLock()
	defer fake.getServiceBindingServiceMutex.RUnlock()
	return len(fake.getServiceBindingServiceArgsForCall)
}

func (fake *FakeInquisitor) GetServiceBindingServiceCalls(stub func() *query.ServiceBindingService) {
	fake.getServiceBindingServiceMutex.Lock()
	defer fake.getServiceBindingServiceMutex.Unlock()
	fake.GetServiceBindingServiceStub = stub
}

func (fake *FakeInquisitor) GetServiceBindingServiceReturns(result1 *query.ServiceBindingService) {
	fake.getServiceBindingServiceMutex.Lock()
	defer fake.getServiceBindingServiceMutex.Unlock()
	fake.GetServiceBindingServiceStub = nil
	fake.getServiceBindingServiceReturns = struct {
		result1 *query.ServiceBindingService
	}{result1}
}

func (fake *FakeInquisitor) GetServiceBindingServiceReturnsOnCall(i int, result1 *query.ServiceBindingService) {
	fake.getServiceBindingServiceMutex.Lock()
	defer fake.getServiceBindingServiceMutex.Unlock()
	fake.GetServiceBindingServiceStub = nil
	if fake.getServiceBindingServiceReturnsOnCall == nil {
		fake.getServiceBindingServiceReturnsOnCall = make(map[int]struct {
			result1 *query.ServiceBindingService
		})
	}
	fake.getServiceBindingServiceReturnsOnCall[i] = struct {
		result1 *query.ServiceBindingService
	}{result1}
}

func (fake *FakeInquisitor) GetServiceInstanceService() *query.ServiceInstanceService {
	fake.getServiceInstanceServiceMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceServiceReturnsOnCall[len(fake.getServiceInstanceServiceArgsForCall)]
	fake.getServiceInstanceServiceArgsForCall = append(fake.getServiceInstanceServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("GetServiceInstanceService", []interface{}{})
	fake.getServiceInstanceServiceMutex.Unlock()
	if fake.GetServiceInstanceServiceStub != nil {
		return fake.GetServiceInstanceServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getServiceInstanceServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) GetServiceInstanceServiceCallCount() int {
	fake.getServiceInstanceServiceMutex.RLock()
	defer fake.getServiceInstanceServiceMutex.RUnlock()
	return len(fake.getServiceInstanceServiceArgsForCall)
}

func (fake *FakeInquisitor) GetServiceInstanceServiceCalls(stub func() *query.ServiceInstanceService) {
	fake.getServiceInstanceServiceMutex.Lock()
	defer fake.getServiceInstanceServiceMutex.Unlock()
	fake.GetServiceInstanceServiceStub = stub
}

func (fake *FakeInquisitor) GetServiceInstanceServiceReturns(result1 *query.ServiceInstanceService) {
	fake.getServiceInstanceServiceMutex.Lock()
	defer fake.getServiceInstanceServiceMutex.Unlock()
	fake.GetServiceInstanceServiceStub = nil
	fake.getServiceInstanceServiceReturns = struct {
		result1 *query.ServiceInstanceService
	}{result1}
}

func (fake *FakeInquisitor) GetServiceInstanceServiceReturnsOnCall(i int, result1 *query.ServiceInstanceService) {
	fake.getServiceInstanceServiceMutex.Lock()
	defer fake.getServiceInstanceServiceMutex.Unlock()
	fake.GetServiceInstanceServiceStub = nil
	if fake.getServiceInstanceServiceReturnsOnCall == nil {
		fake.getServiceInstanceServiceReturnsOnCall = make(map[int]struct {
			result1 *query.ServiceInstanceService
		})
	}
	fake.getServiceInstanceServiceReturnsOnCall[i] = struct {
		result1 *query.ServiceInstanceService
	}{result1}
}

func (fake *FakeInquisitor) GetSpaceService() *query.SpaceService {
	fake.getSpaceServiceMutex.Lock()
	ret, specificReturn := fake.getSpaceServiceReturnsOnCall[len(fake.getSpaceServiceArgsForCall)]
	fake.getSpaceServiceArgsForCall = append(fake.getSpaceServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("GetSpaceService", []interface{}{})
	fake.getSpaceServiceMutex.Unlock()
	if fake.GetSpaceServiceStub != nil {
		return fake.GetSpaceServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getSpaceServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) GetSpaceServiceCallCount() int {
	fake.getSpaceServiceMutex.RLock()
	defer fake.getSpaceServiceMutex.RUnlock()
	return len(fake.getSpaceServiceArgsForCall)
}

func (fake *FakeInquisitor) GetSpaceServiceCalls(stub func() *query.SpaceService) {
	fake.getSpaceServiceMutex.Lock()
	defer fake.getSpaceServiceMutex.Unlock()
	fake.GetSpaceServiceStub = stub
}

func (fake *FakeInquisitor) GetSpaceServiceReturns(result1 *query.SpaceService) {
	fake.getSpaceServiceMutex.Lock()
	defer fake.getSpaceServiceMutex.Unlock()
	fake.GetSpaceServiceStub = nil
	fake.getSpaceServiceReturns = struct {
		result1 *query.SpaceService
	}{result1}
}

func (fake *FakeInquisitor) GetSpaceServiceReturnsOnCall(i int, result1 *query.SpaceService) {
	fake.getSpaceServiceMutex.Lock()
	defer fake.getSpaceServiceMutex.Unlock()
	fake.GetSpaceServiceStub = nil
	if fake.getSpaceServiceReturnsOnCall == nil {
		fake.getSpaceServiceReturnsOnCall = make(map[int]struct {
			result1 *query.SpaceService
		})
	}
	fake.getSpaceServiceReturnsOnCall[i] = struct {
		result1 *query.SpaceService
	}{result1}
}

func (fake *FakeInquisitor) NewAppService() *query.AppService {
	fake.newAppServiceMutex.Lock()
	ret, specificReturn := fake.newAppServiceReturnsOnCall[len(fake.newAppServiceArgsForCall)]
	fake.newAppServiceArgsForCall = append(fake.newAppServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("NewAppService", []interface{}{})
	fake.newAppServiceMutex.Unlock()
	if fake.NewAppServiceStub != nil {
		return fake.NewAppServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newAppServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) NewAppServiceCallCount() int {
	fake.newAppServiceMutex.RLock()
	defer fake.newAppServiceMutex.RUnlock()
	return len(fake.newAppServiceArgsForCall)
}

func (fake *FakeInquisitor) NewAppServiceCalls(stub func() *query.AppService) {
	fake.newAppServiceMutex.Lock()
	defer fake.newAppServiceMutex.Unlock()
	fake.NewAppServiceStub = stub
}

func (fake *FakeInquisitor) NewAppServiceReturns(result1 *query.AppService) {
	fake.newAppServiceMutex.Lock()
	defer fake.newAppServiceMutex.Unlock()
	fake.NewAppServiceStub = nil
	fake.newAppServiceReturns = struct {
		result1 *query.AppService
	}{result1}
}

func (fake *FakeInquisitor) NewAppServiceReturnsOnCall(i int, result1 *query.AppService) {
	fake.newAppServiceMutex.Lock()
	defer fake.newAppServiceMutex.Unlock()
	fake.NewAppServiceStub = nil
	if fake.newAppServiceReturnsOnCall == nil {
		fake.newAppServiceReturnsOnCall = make(map[int]struct {
			result1 *query.AppService
		})
	}
	fake.newAppServiceReturnsOnCall[i] = struct {
		result1 *query.AppService
	}{result1}
}

func (fake *FakeInquisitor) NewOrgService() *query.OrgService {
	fake.newOrgServiceMutex.Lock()
	ret, specificReturn := fake.newOrgServiceReturnsOnCall[len(fake.newOrgServiceArgsForCall)]
	fake.newOrgServiceArgsForCall = append(fake.newOrgServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("NewOrgService", []interface{}{})
	fake.newOrgServiceMutex.Unlock()
	if fake.NewOrgServiceStub != nil {
		return fake.NewOrgServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newOrgServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) NewOrgServiceCallCount() int {
	fake.newOrgServiceMutex.RLock()
	defer fake.newOrgServiceMutex.RUnlock()
	return len(fake.newOrgServiceArgsForCall)
}

func (fake *FakeInquisitor) NewOrgServiceCalls(stub func() *query.OrgService) {
	fake.newOrgServiceMutex.Lock()
	defer fake.newOrgServiceMutex.Unlock()
	fake.NewOrgServiceStub = stub
}

func (fake *FakeInquisitor) NewOrgServiceReturns(result1 *query.OrgService) {
	fake.newOrgServiceMutex.Lock()
	defer fake.newOrgServiceMutex.Unlock()
	fake.NewOrgServiceStub = nil
	fake.newOrgServiceReturns = struct {
		result1 *query.OrgService
	}{result1}
}

func (fake *FakeInquisitor) NewOrgServiceReturnsOnCall(i int, result1 *query.OrgService) {
	fake.newOrgServiceMutex.Lock()
	defer fake.newOrgServiceMutex.Unlock()
	fake.NewOrgServiceStub = nil
	if fake.newOrgServiceReturnsOnCall == nil {
		fake.newOrgServiceReturnsOnCall = make(map[int]struct {
			result1 *query.OrgService
		})
	}
	fake.newOrgServiceReturnsOnCall[i] = struct {
		result1 *query.OrgService
	}{result1}
}

func (fake *FakeInquisitor) NewServiceBindingService() *query.ServiceBindingService {
	fake.newServiceBindingServiceMutex.Lock()
	ret, specificReturn := fake.newServiceBindingServiceReturnsOnCall[len(fake.newServiceBindingServiceArgsForCall)]
	fake.newServiceBindingServiceArgsForCall = append(fake.newServiceBindingServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("NewServiceBindingService", []interface{}{})
	fake.newServiceBindingServiceMutex.Unlock()
	if fake.NewServiceBindingServiceStub != nil {
		return fake.NewServiceBindingServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newServiceBindingServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) NewServiceBindingServiceCallCount() int {
	fake.newServiceBindingServiceMutex.RLock()
	defer fake.newServiceBindingServiceMutex.RUnlock()
	return len(fake.newServiceBindingServiceArgsForCall)
}

func (fake *FakeInquisitor) NewServiceBindingServiceCalls(stub func() *query.ServiceBindingService) {
	fake.newServiceBindingServiceMutex.Lock()
	defer fake.newServiceBindingServiceMutex.Unlock()
	fake.NewServiceBindingServiceStub = stub
}

func (fake *FakeInquisitor) NewServiceBindingServiceReturns(result1 *query.ServiceBindingService) {
	fake.newServiceBindingServiceMutex.Lock()
	defer fake.newServiceBindingServiceMutex.Unlock()
	fake.NewServiceBindingServiceStub = nil
	fake.newServiceBindingServiceReturns = struct {
		result1 *query.ServiceBindingService
	}{result1}
}

func (fake *FakeInquisitor) NewServiceBindingServiceReturnsOnCall(i int, result1 *query.ServiceBindingService) {
	fake.newServiceBindingServiceMutex.Lock()
	defer fake.newServiceBindingServiceMutex.Unlock()
	fake.NewServiceBindingServiceStub = nil
	if fake.newServiceBindingServiceReturnsOnCall == nil {
		fake.newServiceBindingServiceReturnsOnCall = make(map[int]struct {
			result1 *query.ServiceBindingService
		})
	}
	fake.newServiceBindingServiceReturnsOnCall[i] = struct {
		result1 *query.ServiceBindingService
	}{result1}
}

func (fake *FakeInquisitor) NewServiceInstanceService() *query.ServiceInstanceService {
	fake.newServiceInstanceServiceMutex.Lock()
	ret, specificReturn := fake.newServiceInstanceServiceReturnsOnCall[len(fake.newServiceInstanceServiceArgsForCall)]
	fake.newServiceInstanceServiceArgsForCall = append(fake.newServiceInstanceServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("NewServiceInstanceService", []interface{}{})
	fake.newServiceInstanceServiceMutex.Unlock()
	if fake.NewServiceInstanceServiceStub != nil {
		return fake.NewServiceInstanceServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newServiceInstanceServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) NewServiceInstanceServiceCallCount() int {
	fake.newServiceInstanceServiceMutex.RLock()
	defer fake.newServiceInstanceServiceMutex.RUnlock()
	return len(fake.newServiceInstanceServiceArgsForCall)
}

func (fake *FakeInquisitor) NewServiceInstanceServiceCalls(stub func() *query.ServiceInstanceService) {
	fake.newServiceInstanceServiceMutex.Lock()
	defer fake.newServiceInstanceServiceMutex.Unlock()
	fake.NewServiceInstanceServiceStub = stub
}

func (fake *FakeInquisitor) NewServiceInstanceServiceReturns(result1 *query.ServiceInstanceService) {
	fake.newServiceInstanceServiceMutex.Lock()
	defer fake.newServiceInstanceServiceMutex.Unlock()
	fake.NewServiceInstanceServiceStub = nil
	fake.newServiceInstanceServiceReturns = struct {
		result1 *query.ServiceInstanceService
	}{result1}
}

func (fake *FakeInquisitor) NewServiceInstanceServiceReturnsOnCall(i int, result1 *query.ServiceInstanceService) {
	fake.newServiceInstanceServiceMutex.Lock()
	defer fake.newServiceInstanceServiceMutex.Unlock()
	fake.NewServiceInstanceServiceStub = nil
	if fake.newServiceInstanceServiceReturnsOnCall == nil {
		fake.newServiceInstanceServiceReturnsOnCall = make(map[int]struct {
			result1 *query.ServiceInstanceService
		})
	}
	fake.newServiceInstanceServiceReturnsOnCall[i] = struct {
		result1 *query.ServiceInstanceService
	}{result1}
}

func (fake *FakeInquisitor) NewSpaceService() *query.SpaceService {
	fake.newSpaceServiceMutex.Lock()
	ret, specificReturn := fake.newSpaceServiceReturnsOnCall[len(fake.newSpaceServiceArgsForCall)]
	fake.newSpaceServiceArgsForCall = append(fake.newSpaceServiceArgsForCall, struct {
	}{})
	fake.recordInvocation("NewSpaceService", []interface{}{})
	fake.newSpaceServiceMutex.Unlock()
	if fake.NewSpaceServiceStub != nil {
		return fake.NewSpaceServiceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newSpaceServiceReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) NewSpaceServiceCallCount() int {
	fake.newSpaceServiceMutex.RLock()
	defer fake.newSpaceServiceMutex.RUnlock()
	return len(fake.newSpaceServiceArgsForCall)
}

func (fake *FakeInquisitor) NewSpaceServiceCalls(stub func() *query.SpaceService) {
	fake.newSpaceServiceMutex.Lock()
	defer fake.newSpaceServiceMutex.Unlock()
	fake.NewSpaceServiceStub = stub
}

func (fake *FakeInquisitor) NewSpaceServiceReturns(result1 *query.SpaceService) {
	fake.newSpaceServiceMutex.Lock()
	defer fake.newSpaceServiceMutex.Unlock()
	fake.NewSpaceServiceStub = nil
	fake.newSpaceServiceReturns = struct {
		result1 *query.SpaceService
	}{result1}
}

func (fake *FakeInquisitor) NewSpaceServiceReturnsOnCall(i int, result1 *query.SpaceService) {
	fake.newSpaceServiceMutex.Lock()
	defer fake.newSpaceServiceMutex.Unlock()
	fake.NewSpaceServiceStub = nil
	if fake.newSpaceServiceReturnsOnCall == nil {
		fake.newSpaceServiceReturnsOnCall = make(map[int]struct {
			result1 *query.SpaceService
		})
	}
	fake.newSpaceServiceReturnsOnCall[i] = struct {
		result1 *query.SpaceService
	}{result1}
}

func (fake *FakeInquisitor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAppServiceMutex.RLock()
	defer fake.getAppServiceMutex.RUnlock()
	fake.getOrgServiceMutex.RLock()
	defer fake.getOrgServiceMutex.RUnlock()
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	fake.getServiceBindingServiceMutex.RLock()
	defer fake.getServiceBindingServiceMutex.RUnlock()
	fake.getServiceInstanceServiceMutex.RLock()
	defer fake.getServiceInstanceServiceMutex.RUnlock()
	fake.getSpaceServiceMutex.RLock()
	defer fake.getSpaceServiceMutex.RUnlock()
	fake.newAppServiceMutex.RLock()
	defer fake.newAppServiceMutex.RUnlock()
	fake.newOrgServiceMutex.RLock()
	defer fake.newOrgServiceMutex.RUnlock()
	fake.newServiceBindingServiceMutex.RLock()
	defer fake.newServiceBindingServiceMutex.RUnlock()
	fake.newServiceInstanceServiceMutex.RLock()
	defer fake.newServiceInstanceServiceMutex.RUnlock()
	fake.newSpaceServiceMutex.RLock()
	defer fake.newSpaceServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInquisitor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ query.Inquisitor = new(FakeInquisitor)
