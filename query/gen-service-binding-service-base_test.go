// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query_test

import (
	. "github.com/mike-carey/cfquery/query"
	. "github.com/onsi/gomega"
	. "github.com/onsi/ginkgo"
	"fmt"
	"io"
	"reflect"

	"github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/cfquery/cf/fakes"
)

func getServiceBindingServiceName() string {
	return fmt.Sprintf("%v", reflect.TypeOf(ServiceBindingService{}))
}

func getServiceBindingName() string {
	return fmt.Sprintf("%v", reflect.TypeOf(cfclient.ServiceBinding{}))
}

func newServiceBinding(guid string) cfclient.ServiceBinding {
	return cfclient.ServiceBinding{
		Guid: guid,
	}
}

func ServiceBindingShouldImplementService(service Service) {
	io.WriteString(GinkgoWriter, fmt.Sprintf("If this did not compile, it indicates that %v does not implement Service", reflect.TypeOf(&cfclient.ServiceBinding{})))
}

var _ = Describe(getServiceBindingServiceName()+"Base", func() {

	var (
		fakeClient *fakes.FakeCFClient
		service    *ServiceBindingService
	)

	BeforeEach(func() {
		fakeClient = new(fakes.FakeCFClient)
		service = NewServiceBindingService(fakeClient)
	})

	It("Should Implement Service", func() {
		ServiceBindingShouldImplementService(service)
	})

	It("Should Get All "+getServiceBindingName()+"s", func() {
		By("Calling the CFClient")
		expect := ServiceBindings{
			newServiceBinding("one"),
			newServiceBinding("two"),
			newServiceBinding("three"),
		}

		fakeClient.ListServiceBindingsReturns(expect, nil)

		actual, err := service.GetAll()

		Expect(err).To(BeNil())
		Expect(actual).Should(ConsistOf(expect))

		Expect(fakeClient.ListServiceBindingsCallCount()).To(Equal(1))

		By("Using the storage")

		actual2, err2 := service.GetAll()

		Expect(err2).To(BeNil())
		Expect(actual2).Should(ConsistOf(expect))

		// It should still equal 1
		Expect(fakeClient.ListServiceBindingsCallCount()).To(Equal(1))
	})

})
